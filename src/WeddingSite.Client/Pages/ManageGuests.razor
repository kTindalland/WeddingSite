@page "/manageguests"
@using WeddingSite.Contracts.DTOs
@using WeddingSite.Client.Services.Abstractions
@using WeddingSite.Client.Components
@inject ISnackbar Snackbar
@inject IDataService DataService
@inject IDialogService DialogService

<div class="d-flex flex-wrap align-stretch mt-2 mb-1">
    <MudText Typo="Typo.h3" Color="Color.Default">Manage Guests</MudText>
    <MudSpacer />
    <MudTextField  @bind-Value="@_searchText" Label="Search for Name" Variant="Variant.Outlined"
                   Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" Clearable="true" />
</div>


@if (_loading)
{
    <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7"/>
}
else
{
    <MudText Typo="Typo.caption" Color="Color.Default">RSVP Sections</MudText>
    
    <MudChipSet @bind-SelectedChips="_selectedRsvpSectionChips" MultiSelection="true" Filter="true" Class="mb-1">
        @foreach (var rsvpSection in _allGuests.SelectMany(x => x.RsvpSections).Distinct())
        {
            <MudChip Text="@rsvpSection" Default="true" Variant="Variant.Text" Color="Color.Info"></MudChip>
        }
    </MudChipSet>
    
    <div class="d-flex flex-grow-1 justify-center justify-sm-start mb-4 ">
        <MudChip Text="New Guest" Color="Color.Success" Icon="@Icons.Material.Filled.Add" Label="true" Size="Size.Large"
                 Class="px-10 px-sm-3 " OnClick="NewGuest" />
    </div>
    

    <MudGrid>
        @{ var filterSections = _selectedRsvpSectionChips.Select(x => x.Text).ToList(); }
        @foreach (var guest in _allGuests)
        {
            @if (string.IsNullOrEmpty(_searchText) is false
                && guest.Name.ToLower().Contains(_searchText.ToLower()) is false) { continue; }
            
            @if (guest.RsvpSections.Intersect(filterSections).Any() is false) { continue; }

            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudPaper Class="pa-2">
                    <div class="d-flex align-stretch">
                        <MudText Typo="Typo.h5" Class="ms-2 mt-1">@guest.Name</MudText>
                        <MudSpacer />
                        <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick="() => EditGuest(guest)"></MudIconButton>
                    </div>
                    


                    @foreach (var rsvpSection in guest.RsvpSections)
                    {
                        <MudChip Text="@rsvpSection" Variant="Variant.Text" Color="Color.Info" Size="Size.Small"></MudChip>
                    }
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
    
}

@code {
    private MudChip[] _selectedRsvpSectionChips;
    private bool _loading = true;
    private List<GuestDto> _allGuests = new();
    private string _searchText = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        var allGuestsResult = await DataService.GetAllGuestsAsync();

        _allGuests = allGuestsResult.Match(
            m => m,
            err =>
            {
                Snackbar.Add(err.Message, Severity.Error);
                return new List<GuestDto>();
            });

        _loading = false;
        
        await base.OnInitializedAsync();
        
        this.StateHasChanged();
    }

    private void EditGuest(GuestDto guest)
    {
        var parameters = new DialogParameters<EditGuestDialog> {{x => x.Guest, guest}};

        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large};

        DialogService.Show<EditGuestDialog>("Edit Guest", parameters, options);
    }

    private async Task NewGuest()
    {
        var options = new DialogOptions() {CloseButton = true, MaxWidth = MaxWidth.Large};
        
        var dialogTask = DialogService.Show<AddGuestDialog>("New Guest", options).Result;
        
        var result = await dialogTask;

        if (result.Canceled is false)
        {
            var guestData = (GuestDto) result.Data;
            
            _allGuests.Add(guestData);
        }
    }
}