@page "/"
@using WeddingSite.Client.Services.Abstractions
@using WeddingSite.Client.Authentication

@inject IDataService _dataService
@inject ITokenService _tokenService
@inject NavigationManager _navManager
@inject CustomAuthStateProvider _authStateProvider
@inject ISnackbar Snackbar

@inject ILogger<Index> _logger

<PageTitle>K&S Wedding - Login</PageTitle>

<MudPaper Class="pa-16 ma-2" Outlined="true">
    <MudText Typo="Typo.h4">Passphrase Login</MudText>
    <AuthorizeView>
        <Authorized>
            <MudAlert Severity="Severity.Info">
                You're currently already logged in
            </MudAlert>
            <div class="d-flex pt-4">
                <MudButton OnClick="ClearToken" Variant="Variant.Filled" Color="Color.Secondary" Class="mx-auto px-16">
                    Log out
                </MudButton>
            </div>
        </Authorized>
        <NotAuthorized>
            
            <MudForm>
                <MudTextField T="string" Label="Passphrase" @bind-Value="@_passphraseValue"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Key"/>

                <div class="d-flex pt-4">
                    <MudButton OnClick="GetToken" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto px-16">Login</MudButton>
                </div>
            </MudForm>
            
        </NotAuthorized>
    </AuthorizeView>
</MudPaper>

@code {
    private string _passphraseValue = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        
        var redirect = authState.User.HasClaim(c => c.Type == "guests");
        
        if (redirect) _navManager.NavigateTo("/about");
        
        await base.OnInitializedAsync();
    }

    private async Task GetToken()
    {
        var currentPassphrase = _passphraseValue;
        _logger.LogInformation("Attempting to get a token using passphrase {Passphrase}", currentPassphrase);
        
        var result = await _dataService.GetAuthTokenAsync(currentPassphrase);

        if (result == currentPassphrase)
        {
            _logger.LogWarning("Passphrase search failed! passphrase: {Passphrase}", currentPassphrase);

            Snackbar.Add($"An invitation with that passphrase wasn't found!", Severity.Error);
            
            return;
        }
        
        _logger.LogInformation("Got token from passphrase! passphrase: {Passphrase}", currentPassphrase);

        await _tokenService.StoreTokenAsync(result);

        await _authStateProvider.RaiseAuthenticationStateChanged();

        Snackbar.Add($"Login Successful!", Severity.Success);

        _passphraseValue = string.Empty;
        
        _navManager.NavigateTo("/about");
        
        this.StateHasChanged();
    }

    private async Task ClearToken()
    {
        await _tokenService.ClearTokenAsync();
        await _authStateProvider.RaiseAuthenticationStateChanged();

        Snackbar.Add("Successfully Logged Out!", Severity.Info);
        this.StateHasChanged();
    }

}