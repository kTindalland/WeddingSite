@page "/"
@using WeddingSite.Client.Services.Abstractions
@using WeddingSite.Client.Authentication

@inject IDataService DataService
@inject ITokenService TokenService
@inject NavigationManager NavManager
@inject CustomAuthStateProvider AuthStateProvider

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>
<p>This is version v0.2.5</p>
<hr />

<input type="text" placeholder="Passphrase" @bind-value="@passphraseValue" />
<input @onclick="GetToken" type="submit" value="Get Token" />

<hr />

<span style="white-space: pre-line;">@text</span>

<hr />

<AuthorizeView>
    <Authorized>
        The user is authorized, hello @context.User.Claims.FirstOrDefault(u => u.Type == "guests")?.Value
        <button @onclick="ClearToken">Clear Token</button>
    </Authorized>
    <NotAuthorized>
        The User is not authorized
    </NotAuthorized>
</AuthorizeView>

@code {
    private string passphraseValue = string.Empty;
    private string text = string.Empty;

    private async Task GetToken()
    {
        var currentPassphrase = passphraseValue;
        var result = await DataService.GetAuthTokenAsync(currentPassphrase);

        if (result == currentPassphrase)
        {
            text = "Couldn't find an invitation with that passphrase!";
            return;
        }


        await TokenService.StoreTokenAsync(result);

        await AuthStateProvider.RaiseAuthenticationStateChanged();

        text = result;
        this.StateHasChanged();
    }

    private async Task ClearToken()
    {
        await TokenService.ClearTokenAsync();

        
        await AuthStateProvider.RaiseAuthenticationStateChanged();
        this.StateHasChanged();
    }

}