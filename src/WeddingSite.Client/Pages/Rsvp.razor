@using Microsoft.AspNetCore.Authorization
@using WeddingSite.Client.Services.Abstractions
@using WeddingSite.Contracts.DTOs
@using LanguageExt
@using Microsoft.AspNetCore.Components.Rendering
@using WeddingSite.Client.Components
@inject IDataService DataService
@attribute [Authorize]
@page "/rsvp/{name}"

@inject AuthenticationStateProvider AuthenticationStateProvider

@{
    RenderFragment renderFragment = (builder) =>
    {
        _errorMessage.Match(
            errorMessage => BuildErrorDisplay(errorMessage, builder),
            () => BuildRsvpManager(_model, builder));
    };
    
    @renderFragment
}

@code {
    const string UserNotFoundMessage = "Your user data could'nt be retrieved from the server! Sorry!";

    [Parameter]
    public string Name { get; set; } = string.Empty;

    private Option<GuestDto> _model = Option<GuestDto>.None;
    private Option<string> _errorMessage = Option<string>.None;

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var guestOption = await GetClaimsPrincipalData(authState);

        guestOption.Match(
            some => _model = Option<GuestDto>.Some(some),
            () => _errorMessage = Option<string>.Some(UserNotFoundMessage));
        
        await base.OnParametersSetAsync();
    }

    private async Task<Option<GuestDto>> GetClaimsPrincipalData(AuthenticationState authState)
    {
        var user = authState.User;

        var guestIds = user.Claims.Where(c => c.Type == "guests").Select(c => c.Value).ToList();

        foreach (var id in guestIds)
        {
            var guestDto = await DataService.GetGuestAsync(id);
            
            if (guestDto is null) continue;

            if (guestDto.Name == Name)
            {
                return Option<GuestDto>.Some(guestDto);
            }
        }

        return Option<GuestDto>.None;
    }

    private static void BuildErrorDisplay(string errorMessage, RenderTreeBuilder builder)
    {
        builder.OpenComponent<ErrorDisplay>(0);
        builder.AddAttribute(1, "ErrorMessage", errorMessage);
        builder.CloseComponent();
    }

    private static void BuildRsvpManager(Option<GuestDto> guestOption, RenderTreeBuilder builder)
    {
        guestOption.Match(
            some => BuildFullRsvpManager(some, builder),
            () => BuildLoadingSpinner(builder));
    }

    private static void BuildFullRsvpManager(GuestDto guestDto, RenderTreeBuilder builder)
    {
        builder.OpenComponent<RsvpManager>(0);
        builder.AddAttribute(1, "Guest", guestDto);
        builder.CloseComponent();
    }

    private static void BuildLoadingSpinner(RenderTreeBuilder builder)
    {
        builder.OpenComponent<Skeleton>(0);
        builder.CloseComponent();
    }
}
