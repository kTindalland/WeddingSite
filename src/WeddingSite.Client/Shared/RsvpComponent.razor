@using Microsoft.AspNetCore.Components.Rendering
@using WeddingSite.Client.Models

<div class="row justify-content-center">
    <div class="col-xl-8 align-self-center col-lg-12 ">
        <EditForm Model="_model" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
        
            <div class="card">
                <h2 class="card-header">@Name - RSVP</h2>
                <div class="card-body">

                    <h3>Will you be attending?</h3>
                    <span>
                        <a class="btn btn-success" @onclick="() => AttendanceAnswer(true)">Yes</a>
                        <a class="btn btn-danger" @onclick="() => AttendanceAnswer(false)">No</a></span>

                    <br />
                    <span>Answer: @_attendanceAnswer</span>
                
                    <AuthorizeView Policy="DiningGuest" Context="authViewContext">
                        <Authorized>
                            @if (_answered && _model.Coming)
                            {
                                <hr />
                                <InputRadioGroup @bind-Value="_model.MealChoice" >
                                    <InputRadio Value="1" /> Choice 1
                                    <InputRadio Value="2" /> Choice 2
                                    <InputRadio Value="3" /> Choice 3
                                </InputRadioGroup>
                            }
                        </Authorized>
                        <NotAuthorized>
                            @{
                                _model.MealChoice = -1;
                            }
                        </NotAuthorized>
                    </AuthorizeView>
                

                </div>
                <div class="card-footer">
                    <input type="submit" class="btn btn-warning" value="Submit">
                    <ValidationSummary />
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Name { get; set; } = string.Empty;

    private RsvpModel _model = new();

    private RenderFragment _attendanceAnswer = InitialiseFragment();

    private bool _answered = false;

    private void OnSubmit()
    {
        Console.WriteLine(_model.MealChoice);
    }

    private static RenderFragment InitialiseFragment() => builder =>
    {
        builder.OpenElement(0, "span");
        builder.AddAttribute(1, "class", "");
        builder.AddContent(2, "N/A");
        builder.CloseElement();
    };

    private void AttendanceAnswer(bool answer)
    {
        _attendanceAnswer = Answer(answer);
        _answered = true;
        _model.Coming = answer;
        if (!answer && _model.MealChoice == null)
        {
            _model.MealChoice = -1;
        }
    }

    private RenderFragment Answer(bool answer) => builder =>
    {
        builder.OpenElement(0, "span");

        if (answer)
        {
            builder.AddAttribute(1, "class", "text-success");
            builder.AddContent(2, "Yes");
        }
        else
        {
            builder.AddAttribute(1, "class", "text-danger");
            builder.AddContent(2, "No");
        }

        builder.CloseElement();
    };
}
